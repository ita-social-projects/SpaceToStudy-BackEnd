components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: returns the user object
      description: Creates JWT token and returns the user object in case that user provides the correct email and password.
      produces:
        - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/login'
      responses:
        200:
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/definitions/user'
  /auth/signup:
    post:
      tags:
        - Auth
      summary:
      description: Stores new user in the database. Returns user information.
      produces:
        - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/signup'
      responses:
        201:
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/definitions/user'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: sends an email with a reset link
      description: Saves a generated reset token and sends an email with a reset link
      produces:
        - application/json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@gmail.com
      responses:
        204:
          description: Email successfully sent
        404:
          description: The email was not found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'EMAIL_NOT_FOUND'
                message: 'There is no user registered with that email.'

  /auth/reset-password/{token}:
    patch:
      tags:
        - Auth
      summary: updates a password to a new one
      description: Checks the reset token for validity, and updates the password
      produces:
        - application/json
      parameters:
        - name: token
          in: path
          required: true
          description: Reset Token
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/resetPassword'
      responses:
        204:
          description: Successful completion of an update
        400:
          description: Reset token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'BAD_RESET_TOKEN'
                message: 'The reset token is either invalid or has expired.'
  /auth/confirm-email/{token}:
    get:
      tags:
        - Auth
      summary: confirms user email
      description: Receives a confirmation token, validates it and confirms user email
      produces:
        - application/json
      parameters:
        - name: token
          in: path
          required: true
          description: Confirmation Token
          type: string
      responses:
        204:
          description: User email has been successfully confirmed
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              examples:
                bad-confirm-token:
                  value:
                    status: 400
                    code: 'BAD_CONFIRM_TOKEN'
                    message: 'The confirm token is either invalid or has expired.'
                email-already-confirmed:
                  value:
                    status: 400
                    code: 'EMAIL_ALREADY_CONFIRMED'
                    message: 'User email has been already confirmed.'
  /auth/refresh:
    get:
      tags:
        - Auth
      summary: refresh access token
      description: Takes refresh token from cookies and retrieve access token
      produces:
        - application/json
      parameters:
        - name: Cookie
          in: header
          required: true
          description: Refresh Token
          type: string
      responses:
        200:
          description: Access token has been successfully refreshed
          headers:
            Set-Cookie:
              schema:
                type: string
                example: refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.GUiOiJzdHVkZW50IiwiaXNatalXJzdExvZ2luIjpQiOjE2NjA5Mjg4ODMsImV4cCI6MWomanzMjQ4M30.gn_hJqB9zVi5Ux5oRu22hGQ9W4z2njkdnx4Od8NXeDM; Max-Age=86400; Domain=s2s-back-stage.azurewebsites.net; Path=/; Expires=Sat, 20 Aug 2022 17:32:57 GMT; HttpOnly; Secure; SameSite=None
          content:
            application/json:
              schema:
                $ref: '#/definitions/accessToken'
              example:
                accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYyZmY2NzU2YjRmMDFjNDA4NmU1MjFmMCIsInJvbGUiOiJzdHVkZW50IiwiaXNataliaaXJzdExvZ2luIjp0cnSuperQiOjE2NjA5Mjg4ODMsImV4cCI6MWomanzMjQ4M30.gn_hJqB9zVi5Ux5oRu22hGQ9W4z2njkdnx4Od8NXeDM'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'BAD_REFRESH_TOKEN'
                message: 'The refresh token is either invalid or has expired.'
