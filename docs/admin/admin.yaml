paths:
  /admins:
    get:
      security:
        - bearerAuth: []
      tags:
        - Admins
      summary: Find all admins
      description: Finds and returns an array of admins and count.
      produces:
        - application/json
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          required: true
        - in: query
          name: name
          schema:
            type: string
          required: true
        - in: query
          name: email
          schema:
            type: string
          required: true
        - in: query
          name: active
          schema:
            type: boolean
          required: true
        - in: query
          name: blocked
          schema:
            type: boolean
          required: true
        - in: query
          name: createdAtFrom
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: createdAtTo
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: lastLoginFrom
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: lastLoginTo
          schema:
            type: string
            format: date-time
          required: true
        - in: query
          name: sortByName
          schema:
            type: integer
          required: true
        - in: query
          name: sortByEmail
          schema:
            type: integer
          required: true
        - in: query
          name: sortByLastLogin
          schema:
            type: integer
          required: true
        - in: query
          name: sortByCreatedAt
          schema:
            type: integer
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/paginated-admins'
              example:
                items:
                  - _id: 6255bc080a75adf9223df100
                    firstName: John
                    lastName: Doe
                    email: johndoe@gmail.com
                    active: true
                    blocked: false
                    lastLogin: 2022-09-02T11:59:53.243+00:00
                    createdAt: 2021-04-09T11:34:53.243+00:00
                    updatedAt: 2022-09-02T11:59:53.243+00:00
                  - _id: 8755bc080a00adr9243df104
                    firstName: Joe
                    lastName: Doe
                    email: joedoe@outlook.com
                    active: true
                    blocked: true
                    lastLogin: 2022-09-02T11:59:53.243+00:00
                    createdAt: 2021-04-09T11:34:53.243+00:00
                    updatedAt: 2022-09-02T11:59:53.243+00:00
                count: 2
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
  /admins/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Admins
      summary: Find admin by ID
      description: Finds and returns an admin with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin that needs to be fetched
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/user'
              example:
                _id: 6255bc080a75adf9223df100
                firstName: John
                lastName: Doe
                email: johndoe@gmail.com
                active: true
                blocked: false
                lastLogin: 2022-09-02T11:59:53.243+00:00
                createdAt: 2021-04-09T11:34:53.243+00:00
                updatedAt: 2022-09-02T11:59:53.243+00:00
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: USER_NOT_FOUND
                message: User with the specified id was not found.
    patch:
      security:
        - bearerAuth: []
      tags:
        - Admins
      summary: Update admin by ID
      description: Updates and returns an admin with the specified ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to update
          type: string
      requestBody:
        required: true
        description: Provide required data to update an admin
        content:
          application/json:
            schema:
              $ref: '#/definitions/user'
            example:
              firstName: John
              lastName: Doe
              email: johndoe@gmail.com
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                schema:
                  $ref: '#/definitions/user'
                example:
                  _id: 6255bc080a75adf9223df100
                  firstName: John
                  lastName: Doe
                  email: johndoe@gmail.com
                  active: true
                  blocked: false
                  lastLogin: 2022-09-02T11:59:53.243+00:00
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: USER_NOT_FOUND
                message: User with the specified id was not found.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Admins
      summary: Delete admin by ID
      description: Deletes an User with the specified ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to delete
          type: string
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: USER_NOT_FOUND
                message: User with the specified id was not found.
      