components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    role:
      type: apiKey
      name: Authorization
      in: header
paths:
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find all users
      description: Finds and returns an array with a list of users.
      produces:
        - application/json
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/users'
              example:
                - _id: 6255bc080a75adf9223df100
                  role: [student, tutor]
                  firstName: John
                  lastName: Doe
                  email: johndoe@gmail.com
                  mainSubjects:
                    {
                      student:
                        [
                          {
                            _id: 64593435163b62124ce4c3ab,
                            name: Cybersecurity,
                            category: '6421ed8ed991d46a84721df2',
                            totalOffers: 15
                          },
                          {
                            _id: 6422d995d898aa732d038e8f,
                            name: Guitar,
                            category: '6421ed8ed991d46a84721dfa',
                            totalOffers: 0
                          }
                        ],
                      tutor:
                        [
                          {
                            _id: 6422d995d898aa732d038e8f,
                            name: Guitar,
                            category: '6421ed8ed991d46a84721dfa',
                            totalOffers: 0
                          }
                        ]
                    }
                  totalReviews: { student: 10, tutor: 8 }
                  averageRating: { student: 4.5, tutor: 4.9 }
                  nativeLanguage: english
                  address: { country: The USA, city: California }
                  professionalSummary: KNPU H.S. Skovoroda
                  photo: john-doe-photo.jpg
                  status: { student: active, tutor: active, admin: active }
                  lastLogin: null
                  FAQ:
                    {
                      student: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }],
                      tutor: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }]
                    }
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
                - _id: 8755bc080a00adr9243df104
                  role: [tutor]
                  firstName: Joe
                  lastName: Doe
                  email: joedoe@outlook.com
                  mainSubjects:
                    {
                      tutor:
                        [
                          {
                            _id: 64593435163b62124ce4c3ab,
                            name: Cybersecurity,
                            category: '6421ed8ed991d46a84721df2',
                            totalOffers: 0
                          }
                        ]
                    }
                  totalReviews: { student: 0, tutor: 530 }
                  averageRating: { student: 0, tutor: 5 }
                  nativeLanguage: ukrainian
                  address: { country: Ukraine, city: Kharkiv }
                  professionalSummary: KNPU H.S. Skovoroda
                  photo: joe-doe-photo.jpg
                  status: { student: active, tutor: active, admin: active }
                  FAQ:
                    {
                      student: [{ question: student question, _id: 63525e23bf163f5ea609ff2b, answer: student answer }],
                      tutor: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }]
                    }
                  lastLogin: 2022-09-02T11:59:53.243+00:00
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
  /users/{id}/change-status:
    patch:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find and update user status by ID
      description: Finds and updates a user status with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user that needs to be updated
          type: string
      requestBody:
        required: true
        description: Provide required data to update user status.
        content:
          application/json:
            schema:
              $ref: '#/definitions/user'
            example:
              tutor: active
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'INVALID_ID'
                message: 'ID is invalid.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 403
                code: FORBIDDEN
                message: You do not have permission to perform this action.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'DOCUMENT_NOT_FOUND'
                message: 'User with the specified id was not found.'
  /users/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find user by ID
      description: Finds and returns a user with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user that needs to be fetched
          type: string
        - name: role
          in: query
          required: false
          description: Role of the user that needs to be fetched
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/user'
              examples:
                example1:
                  _id: 6255bc080a75adf9223df100
                  role: student
                  firstName: John
                  lastName: Doe
                  email: johndoe@gmail.com
                  mainSubjects:
                    {
                      student:
                        [
                          {
                            _id: 64593435163b62124ce4c3ab,
                            name: Cybersecurity,
                            category: '6421ed8ed991d46a84721df2',
                            totalOffers: 0
                          },
                          {
                            _id: 6422d995d898aa732d038e8f,
                            name: Guitar,
                            category: '6421ed8ed991d46a84721dfa',
                            totalOffers: 0
                          }
                        ]
                    }
                  totalReviews: { student: 10, tutor: 0 }
                  averageRating: { student: 4.5, tutor: 0 }
                  nativeLanguage: english
                  address: { country: The USA, city: California }
                  ProfessionalSummary: KNPU H.S. Skovoroda
                  photo: john-doe-photo.jpg
                  status: { student: active, tutor: active, admin: active }
                  isEmailConfirmed: true
                  isFirstLogin: true
                  lastLogin: 2022-09-02T11:59:53.243+00:00
                  bookmarkedOffers: []
                  FAQ:
                    {
                      student: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }],
                      tutor: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }]
                    }
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
                example2:
                  _id: 6255bc080a75adf9223df100
                  role: student
                  firstName: John
                  lastName: Doe
                  email: johndoe@gmail.com
                  mainSubjects:
                    {
                      student:
                        [
                          {
                            _id: 64593435163b62124ce4c3ab,
                            name: Cybersecurity,
                            category: '6421ed8ed991d46a84721df2',
                            totalOffers: 0
                          },
                          {
                            _id: 6422d995d898aa732d038e8f,
                            name: Guitar,
                            category: '6421ed8ed991d46a84721dfa',
                            totalOffers: 0
                          }
                        ]
                    }
                  totalReviews: { student: 10, tutor: 0 }
                  averageRating: { student: 4.5, tutor: 0 }
                  nativeLanguage: english
                  address: { country: The USA, city: California }
                  professionalSummary: KNPU H.S. Skovoroda
                  photo: john-doe-photo.jpg
                  status: { student: active, tutor: active, admin: active }
                  isEmailConfirmed: true
                  isFirstLogin: true
                  lastLogin: 2022-09-02T11:59:53.243+00:00
                  bookmarkedOffers: []
                  FAQ:
                    {
                      student: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }],
                      tutor: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }]
                    }
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'INVALID_ID'
                message: 'ID is invalid.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'DOCUMENT_NOT_FOUND'
                message: 'User with the specified id was not found.'
    patch:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find and update current user info
      description: Finds and updates current user info.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user that needs to be updated
          type: string
      requestBody:
        required: true
        description: Provide required data to update user.
        content:
          application/json:
            schema:
              $ref: '#/definitions/user'
            example:
              firstName: Albus
              lastName: Dumbledore
      responses:
        204:
          description: No Content
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'DOCUMENT_NOT_FOUND'
                message: 'User with the specified id was not found.'
    delete:
      security:
        - bearerAuth: []
        - role:
            - admin
      tags:
        - Users
      summary: Find and delete user by ID
      description: Finds and deletes a user with the specified ID.
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user that needs to be deleted
          type: string
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'INVALID_ID'
                message: 'ID is invalid.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 403
                code: FORBIDDEN
                message: You do not have permission to perform this action.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'DOCUMENT_NOT_FOUND'
                message: 'User with the specified id was not found.'
  /users/{id}/reviews:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find all reviews for a user with the specified ID and role
      description: Finds and returns an array with a list of reviews for a user with the specified ID and role.
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: role
          required: true
          schema:
            type: string
        - in: query
          name: rating
          schema:
            type: integer
          required: false
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/reviewResponse'
              example:
                count: 2
                reviews:
                  - _id: 6255bc080a75adf9223df100
                    comment: Not bad
                    rating: 4
                    author:
                      _id: 6255bc080a75adf9223df100
                      firstName: John
                      lastName: Doe
                      photo: john-doe-photo.jpg
                    targetUserId: 6255bc080a75adf9223df212
                    targetUserRole: tutor
                    offer:
                      _id: 63ebc6fbd2f34037d0aba791
                      proficiencyLevel: Beginner
                      subjectId:
                        _id: 6255bc080a71adf9223df134
                        name: English
                      categoryId:
                        _id: 64045f98b131dd04d7896af6
                        name: languages
                    createdAt: 2022-10-18T13:25:36.292Z
                    updatedAt: 2022-10-18T13:25:36.292Z
                  - _id: 8755bc080a00adr9243df104
                    comment: Best tutor!
                    rating: 5
                    author:
                      _id: 6255bc080a75adf9223df211
                      firstName: John
                      lastName: Doe
                      photo: john-duglas-photo.jpg
                    targetUserId: 6255bc080a75adf9223df212
                    targetUserRole: tutor
                    offer:
                      _id: 63ebc6fbd2f34037d0aba79
                      proficiencyLevel: Advanced
                      subjectId:
                        _id: 6255bc080a71adf9222df134
                        name: English
                      categoryId:
                        _id: 64045f98b131dd04d7896af6
                        name: languages
                    createdAt: 2022-10-18T13:25:36.292Z
                    updatedAt: 2022-10-18T13:25:36.292Z
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: 'INVALID_ID'
                message: 'ID is invalid.'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: 'UNAUTHORIZED'
                message: 'The requested URL requires user authorization.'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: 'DOCUMENT_NOT_FOUND'
                message: 'User with the specified id was not found.'
  /users/{id}/reviews/stats:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find review statistics for a user with the specified ID and role
      description: Finds and returns a review statistics for a user with the specified ID and role.
      produces:
        - application/json
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/reviewResponse'
              example:
                stats: [{ rating: 5, count: 1 }, { rating: 3, count: 1 }]
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: DOCUMENT_NOT_FOUND
                message: User with the specified id was not found.
  /users/{id}/cooperations:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Find cooperations for a user with the specified ID
      description: Finds and returns all cooperations for a user with the specified ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/cooperations'
              example:
                - _id: 63ebc6fbd2f34037d0aba314
                  offerId: 63ebc6fbd2f34037d0aba791
                  initiatorUserId: 6255bc080a75adf9223df212
                  recipientUserId: 6255bc080a75adf9223df100
                  price: 200
                  status: active
                  createdAt: 2021-05-09T11:34:53.243+00:00
                  updatedAt: 2022-07-02T11:59:53.243+00:00
                - _id: 63ebc6fbd2f34037d0aba314
                  offerId: 64ebc6fbd2f34037d0aba781
                  initiatorUserId: 6755bc080a75adf9223df217
                  recipientUserId: 6655bc080a75adf9223df108
                  price: 300
                  status: closed
                  createdAt: 2021-04-09T11:34:53.243+00:00
                  updatedAt: 2022-09-02T11:59:53.243+00:00
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: DOCUMENT_NOT_FOUND
                message: User with the specified id was not found.
  /users/{id}/offers:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Find offers for a user with the specified ID
      description: Finds and returns all offers for a user with the specified ID.
      produces:
        - application/json
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/offers'
              example:
                count: 2
                offers:
                  - _id: 63ebc6fbd2f34037d0aba791
                    price: 111
                    proficiencyLevel: [Beginner]
                    title: offer title
                    description: offer description
                    languages: [English]
                    authorRole: tutor
                    authorFirstName: Amanda
                    authorLastName: Smith
                    authorAvgRating: 4
                    author:
                      _id: 63e63bb04d1bf3bea00e3d88
                      totalReviews:
                        student: 0
                        tutor: 0
                      FAQ:
                        {
                          student: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }],
                          tutor: [{ question: tutor question, _id: 63525e23bf163f5ea609ff2b, answer: tutor answer }]
                        }
                      professionalSummary: My professional summary
                      photo: link-to-photo.png
                    subject:
                      _id: 63da8767c9ad4c9a0b0eacd3
                      name: english
                    category: 63525e23bf163f5ea609ff2b
                    FAQ: [{ _id: 63525e23bf163f5ea609ff2b, question: offer question, answer: offer answer }]
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 400
                code: INVALID_ID
                message: ID is invalid.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 401
                code: UNAUTHORIZED
                message: The requested URL requires user authorization.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
              example:
                status: 404
                code: DOCUMENT_NOT_FOUND
                message: User with the specified id was not found.
